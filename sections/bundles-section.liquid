{% comment %}
  Bundles Section - Goals Specific Bundles
{% endcomment %}

<section class="bundles-section" style="padding: 5rem 0; background-color: #f9f9f9; text-align: center;">
  <div class="container" style="max-width: 1400px; margin: 0 auto; padding: 0 1.5rem;">
    <div class="section-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 3rem; flex-wrap: wrap; gap: 2rem;">
      <div class="header-left" style="display: flex; align-items: center; gap: 1rem;">
        <div class="icon-label" style="display: flex; align-items: center; gap: 0.5rem;">
          {% render 'icon-box' %}
          <span style="font-size: 1rem; color: #666; text-transform: uppercase;">{{ section.settings.icon_label }}</span>
        </div>
        <h2 class="heading-large" style="font-size: 2.5rem; font-weight: 700; color: #333; margin: 0;">{{ section.settings.heading }}</h2>
      </div>
      
      <div class="category-tabs" style="display: flex; gap: 1.5rem; flex-wrap: wrap; justify-content: center;">
        {% for block in section.blocks %}
          {% if block.type == 'category_tab' %}
            <a href="{{ block.settings.tab_link }}" class="category-tab{% if forloop.index == 1 %} active{% endif %}" style="font-size: 1rem; color: #333; text-decoration: none; padding: 0.75rem 1.5rem; border-radius: 8px; background-color: #fff; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05); transition: background-color 0.3s ease; {% if forloop.index == 1 %} background-color: #f0f0f0; {% endif %}">
              {{ block.settings.tab_name }}
            </a>
          {% endif %}
        {% endfor %}
      </div>
      
      <div class="header-right" style="display: flex; align-items: center; gap: 1.5rem;">
        <a href="{{ section.settings.view_all_link }}" class="view-all" style="font-size: 1rem; color: #999; text-decoration: underline;">{{ section.settings.view_all_text }}</a>
        <div class="nav-arrows" style="display: flex; gap: 0.75rem;">
          <button class="nav-arrow prev" style="background: none; border: none; cursor: pointer; font-size: 0; padding: 0.75rem;">
            {% render 'icon-arrow-left' %}
          </button>
          <button class="nav-arrow next" style="background: none; border: none; cursor: pointer; font-size: 0; padding: 0.75rem;">
            {% render 'icon-arrow-right' %}
          </button>
        </div>
      </div>
    </div>
    
    <div class="bundles-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 3rem; padding: 0 1rem; justify-content: center; align-items: center;">
      {% for block in section.blocks %}
        {% if block.type == 'bundle' %}
          <div class="bundle-card" {{ block.shopify_attributes }} data-product-id="{{ block.settings.bundle_product.id | default: 'bundle-' | append: forloop.index }}" data-product-title="{{ block.settings.bundle_title | escape }}" data-product-price="{{ block.settings.bundle_product.price | default: 4995 | divided_by: 100.0 }}" data-product-image="{{ block.settings.bundle_image | img_url: '200x200' | default: 'https://placehold.co/200x200' }}" data-product-url="{{ shop.url }}/products/{{ block.settings.bundle_product.handle | default: '#' }}" data-variant-id="{{ block.settings.bundle_product.variants.first.id | default: 'bundle-variant-' | append: forloop.index }}" style="background: #fff; border-radius: 12px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05); overflow: hidden; text-align: center; position: relative; padding: 1.5rem; width: 100%; max-width: 320px; margin: 0 auto;">
            {% if block.settings.badge_text != blank %}
              <div class="bundle-badge {{ block.settings.badge_type }}" style="position: absolute; top: 1.5rem; left: 1.5rem; background-color: {% if block.settings.badge_type == 'bestseller' %} #ffcc00; {% elsif block.settings.badge_type == 'new' %} #00cc00; {% elsif block.settings.badge_type == 'sale' %} #ff4444; {% else %} transparent; {% endif %}; color: #fff; padding: 0.3rem 0.9rem; border-radius: 6px; font-size: 0.9rem; font-weight: 600;">
                {{ block.settings.badge_text }}
              </div>
            {% endif %}
            <div class="bundle-image" style="width: 100%; height: 220px; overflow: hidden; margin-bottom: 1.5rem; display: flex; justify-content: center; align-items: center;">
              {% if block.settings.bundle_image %}
                {{ block.settings.bundle_image | image_url: width: 300 | image_tag: loading: 'lazy', alt: block.settings.bundle_title, style: 'width: 100%; height: 100%; object-fit: cover;' }}
              {% else %}
                <img src="{{ 'bundle-placeholder.png' | asset_url }}" loading="lazy" alt="Bundle placeholder" style="width: 100%; height: 100%; object-fit: cover;" />
              {% endif %}
            </div>
            <div class="bundle-tags" style="display: flex; flex-wrap: wrap; gap: 0.75rem; margin-bottom: 1rem; justify-content: center;">
              {% assign tags = block.settings.bundle_tags | split: '\n' %}
              {% for tag in tags %}
                {% if tag != blank %}
                  <span class="tag" style="font-size: 0.8rem; color: #666; display: flex; align-items: center; gap: 0.3rem;">
                    {% render 'icon-check' %}
                    {{ tag }}
                  </span>
                {% endif %}
              {% endfor %}
            </div>
            <h3 class="bundle-title" style="font-size: 1.2rem; font-weight: 600; color: #333; margin: 0 0 0.75rem; text-align: center;">{{ block.settings.bundle_title }}</h3>
            <p class="bundle-subtitle" style="font-size: 0.95rem; color: #666; margin: 0 0 1.5rem; text-align: center;">{{ block.settings.bundle_subtitle }}</p>
            <div class="bundle-purchase-options" style="margin-bottom: 1rem;">
              <label style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;">
                <input type="radio" name="purchase-option-{{ forloop.index }}" class="radio-input" value="subscribe" checked style="margin: 0;">
                <span style="font-size: 0.9rem; color: #333;">Subscribe & Save (10% off)</span>
              </label>
              <label style="display: flex; align-items: center; gap: 0.5rem;">
                <input type="radio" name="purchase-option-{{ forloop.index }}" class="radio-input" value="one-time" style="margin: 0;">
                <span style="font-size: 0.9rem; color: #333;">One-Time Purchase</span>
              </label>
            </div>
            <div class="bundle-rating" style="display: flex; justify-content: space-between; align-items: center; flex-direction: column; gap: 1rem;">
              <div class="stars" style="font-size: 1rem; color: #000;">★★★★★</div>
              <button class="add-to-cart-btn" 
                      data-product-id="{{ block.settings.bundle_product.id | default: 'bundle-' | append: forloop.index }}"
                      data-product-title="{{ block.settings.bundle_title | escape }}"
                      data-product-image="{{ block.settings.bundle_image | img_url: '200x200' | default: 'https://placehold.co/200x200' }}"
                      data-product-price="{{ block.settings.bundle_product.price | default: 4995 | divided_by: 100.0 }}"
                      data-product-url="{{ shop.url }}/products/{{ block.settings.bundle_product.handle | default: '#' }}"
                      data-variant-id="{{ block.settings.bundle_product.variants.first.id | default: 'bundle-variant-' | append: forloop.index }}"
                      data-subscription="true"
                      data-card-index="{{ forloop.index }}"
                      style="background-color: #333; color: #fff; padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: background-color 0.3s ease; width: 100%; max-width: 200px;">
                Add • ${{ block.settings.bundle_product.price | default: 4995 | divided_by: 100.0 | times: 0.9 | round: 2 }}
              </button>
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>

  <!-- Responsive Media Queries -->
  <style>
    @media (max-width: 250px) {
      .bundles-section { padding: 2rem 0; }
      .container { padding: 0 0.5rem; }
      .section-header { flex-direction: column; text-align: center; margin-bottom: 1.5rem; gap: 1rem; }
      .header-left .heading-large { font-size: 1.5rem; }
      .icon-label span { font-size: 0.8rem; }
      .category-tabs { gap: 0.5rem; justify-content: center; margin: 1rem 0; }
      .category-tab { font-size: 0.7rem; padding: 0.3rem 0.5rem; border-radius: 4px; }
      .header-right { justify-content: center; margin-top: 1rem; gap: 0.5rem; }
      .view-all { font-size: 0.7rem; }
      .nav-arrow { padding: 0.3rem; }
      .bundles-grid { grid-template-columns: 1fr; gap: 1.5rem; padding: 0 0.5rem; }
      .bundle-card { padding: 0.75rem; max-width: 140px; }
      .bundle-image { height: 120px; margin-bottom: 0.75rem; }
      .bundle-tags { gap: 0.3rem; margin-bottom: 0.5rem; }
      .tag { font-size: 0.6rem; }
      .bundle-title { font-size: 0.9rem; margin-bottom: 0.3rem; }
      .bundle-subtitle { font-size: 0.7rem; margin-bottom: 0.75rem; }
      .bundle-purchase-options label span { font-size: 0.6rem; }
      .bundle-badge { top: 0.75rem; left: 0.75rem; font-size: 0.7rem; padding: 0.2rem 0.5rem; }
      .stars { font-size: 0.8rem; }
      .add-to-cart-btn { font-size: 0.7rem; padding: 0.3rem 0.75rem; }
    }

    @media (min-width: 251px) and (max-width: 576px) {
      .bundles-section { padding: 3rem 0; }
      .container { padding: 0 1rem; }
      .section-header { flex-direction: column; text-align: center; margin-bottom: 2rem; gap: 1.5rem; }
      .header-left .heading-large { font-size: 2rem; }
      .icon-label span { font-size: 0.9rem; }
      .category-tabs { gap: 1rem; margin: 1.5rem 0; }
      .category-tab { font-size: 0.8rem; padding: 0.5rem 1rem; border-radius: 6px; }
      .header-right { justify-content: center; margin-top: 1.5rem; gap: 1rem; }
      .view-all { font-size: 0.8rem; }
      .nav-arrow { padding: 0.5rem; }
      .bundles-grid { grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 2rem; padding: 0 0.75rem; }
      .bundle-card { padding: 1rem; max-width: 200px; }
      .bundle-image { height: 150px; margin-bottom: 1rem; }
      .bundle-tags { gap: 0.5rem; margin-bottom: 0.75rem; }
      .tag { font-size: 0.7rem; }
      .bundle-title { font-size: 1rem; margin-bottom: 0.5rem; }
      .bundle-subtitle { font-size: 0.8rem; margin-bottom: 1rem; }
      .bundle-purchase-options label span { font-size: 0.7rem; }
      .bundle-badge { top: 1rem; left: 1rem; font-size: 0.8rem; padding: 0.25rem 0.75rem; }
      .stars { font-size: 0.9rem; }
      .add-to-cart-btn { font-size: 0.8rem; padding: 0.4rem 1rem; }
    }

    @media (min-width: 577px) and (max-width: 768px) {
      .bundles-section { padding: 4rem 0; }
      .section-header { flex-direction: row; margin-bottom: 2.5rem; gap: 1.5rem; }
      .header-left .heading-large { font-size: 2.2rem; }
      .category-tabs { gap: 1.2rem; }
      .category-tab { font-size: 0.9rem; padding: 0.6rem 1.2rem; border-radius: 6px; }
      .header-right { gap: 1.2rem; }
      .view-all { font-size: 0.9rem; }
      .nav-arrow { padding: 0.6rem; }
      .bundles-grid { grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 2.5rem; }
      .bundle-card { padding: 1.2rem; max-width: 240px; }
      .bundle-image { height: 180px; margin-bottom: 1.2rem; }
      .bundle-tags { gap: 0.6rem; margin-bottom: 0.9rem; }
      .tag { font-size: 0.75rem; }
      .bundle-title { font-size: 1.1rem; margin-bottom: 0.6rem; }
      .bundle-subtitle { font-size: 0.9rem; margin-bottom: 1.2rem; }
      .bundle-purchase-options label span { font-size: 0.8rem; }
      .bundle-badge { top: 1.2rem; left: 1.2rem; font-size: 0.85rem; }
      .stars { font-size: 0.95rem; }
      .add-to-cart-btn { font-size: 0.9rem; padding: 0.5rem 1.1rem; }
    }

    @media (min-width: 769px) and (max-width: 1024px) {
      .section-header { margin-bottom: 3rem; gap: 2rem; }
      .header-left .heading-large { font-size: 2.5rem; }
      .category-tabs { gap: 1.5rem; }
      .category-tab { font-size: 1rem; padding: 0.75rem 1.5rem; border-radius: 8px; }
      .header-right { gap: 1.5rem; }
      .view-all { font-size: 1rem; }
      .bundles-grid { grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 3rem; }
      .bundle-card { padding: 1.5rem; max-width: 280px; }
      .bundle-image { height: 220px; margin-bottom: 1.5rem; }
      .bundle-tags { gap: 0.75rem; margin-bottom: 1rem; }
      .tag { font-size: 0.8rem; }
      .bundle-title { font-size: 1.2rem; margin-bottom: 0.75rem; }
      .bundle-subtitle { font-size: 0.95rem; margin-bottom: 1.5rem; }
      .bundle-purchase-options label span { font-size: 0.9rem; }
      .bundle-badge { top: 1.5rem; left: 1.5rem; font-size: 0.9rem; }
      .stars { font-size: 1rem; }
      .add-to-cart-btn { font-size: 1rem; padding: 0.6rem 1.2rem; }
    }

    @media (min-width: 1025px) and (max-width: 2000px) {
      .section-header { margin-bottom: 3rem; gap: 2rem; }
      .header-left .heading-large { font-size: 2.5rem; }
      .category-tabs { gap: 1.5rem; }
      .category-tab { font-size: 1rem; padding: 0.75rem 1.5rem; border-radius: 3px; }
      .header-right { gap: 1.5rem; }
      .view-all { font-size: 1rem; }
      .bundles-grid { grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 3.5rem; }
      .bundle-card { padding: 1.5rem; max-width: 320px; }
      .bundle-image { height: 260px; margin-bottom: 1.5rem; }
      .bundle-tags { gap: 0.75rem; margin-bottom: 0.2rem; }
      .tag { font-size: 0.85rem; }
      .bundle-title { font-size: 1.3rem; margin-bottom: 0.75rem; }
      .bundle-subtitle { font-size: 1rem; margin-bottom: 1.5rem; }
      .bundle-purchase-options label span { font-size: 0.9rem; }
      .bundle-badge { top: 1.5rem; left: 1.5rem; font-size: 0.9rem; }
      .stars { font-size: 1.1rem; }
      .add-to-cart-btn { font-size: 1rem; padding: 0.6rem 1.2rem; }
    }

    @media (min-width: 2001px) {
      .section-header { margin-bottom: 4rem; gap: 2.5rem; }
      .header-left .heading-large { font-size: 3rem; }
      .category-tabs { gap: 2rem; }
      .category-tab { font-size: 1.2rem; padding: 0.9rem 1.8rem; border-radius: 10px; }
      .header-right { gap: 2rem; }
      .view-all { font-size: 1.2rem; }
      .bundles-grid { grid-template-columns: repeat(auto-fit, minmax(380px, 1fr)); gap: 4rem; }
      .bundle-card { padding: 2rem; max-width: 380px; }
      .bundle-image { height: 300px; margin-bottom: 2rem; }
      .bundle-tags { gap: 1rem; margin-bottom: 1.5rem; }
      .tag { font-size: 1rem; }
      .bundle-title { font-size: 1.5rem; margin-bottom: 1rem; }
      .bundle-subtitle { font-size: 1.2rem; margin-bottom: 2rem; }
      .bundle-purchase-options label span { font-size: 1rem; }
      .bundle-badge { top: 2rem; left: 2rem; font-size: 1rem; padding: 0.4rem 1rem; }
      .stars { font-size: 1.2rem; }
      .add-to-cart-btn { font-size: 1.2rem; padding: 0.8rem 1.5rem; }
    }
  </style>

  <!-- Add JavaScript for cart functionality -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // --- CART ELEMENTS ---
      const cartDrawer = document.getElementById('cart-drawer');
      const cartOverlay = document.getElementById('cart-overlay');
      const cartIcons = document.querySelectorAll('.cart-icon');
      const closeCartButton = document.querySelector('.cart-drawer-close');
      const cartItemsContainer = document.querySelector('.cart-items-container');
      const cartCountElements = document.querySelectorAll('.cart-count');
      const subtotalPriceElement = document.querySelector('.subtotal-price');
      const cartItemCountDisplay = document.querySelector('.cart-item-count-display');
      const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
      const shippingAmountAwayEl = document.querySelector('.shipping-amount-away');
      const shippingProgressBar = document.querySelector('.progress-bar');
      
      // --- CART STATE & CONFIG ---
      let cartItems = [];
      const FREE_SHIPPING_THRESHOLD = 80;

      // --- CART FUNCTIONS ---

      const openCart = () => {
        cartDrawer.classList.add('active');
        cartOverlay.classList.add('active');
        document.body.style.overflow = 'hidden';
      };

      const closeCart = () => {
        cartDrawer.classList.remove('active');
        cartOverlay.classList.remove('active');
        document.body.style.overflow = '';
      };

      const renderCart = () => {
        cartItemsContainer.innerHTML = '';
        if (cartItems.length === 0) {
          cartItemsContainer.innerHTML = '<p style="text-align:center; padding: 40px 0; font-family: Rubik;">Your bag is empty.</p>';
        } else {
          cartItems.forEach(item => {
            const cartItemElement = document.createElement('div');
            cartItemElement.classList.add('cart-item');
            cartItemElement.dataset.id = item.id;
            cartItemElement.innerHTML = `
              <img src="${item.image || 'https://placehold.co/80x80'}" alt="${item.name || 'Unknown Item'}" class="cart-item-image" onerror="this.onerror=null;this.src='https://placehold.co/80x80/f0f0f0/333?text=Image';">
              <div class="cart-item-details">
                <p class="cart-item-title">${item.name || 'Unnamed Product'}</p>
                <p class="cart-item-price">$${item.price && !isNaN(item.price) ? item.price.toFixed(2) : '0.00'}</p>
                <div class="cart-item-actions">
                  <div class="quantity-selector">
                    <button class="quantity-btn" data-action="decrease" aria-label="Decrease quantity">-</button>
                    <span class="item-quantity">${item.quantity || 1}</span>
                    <button class="quantity-btn" data-action="increase" aria-label="Increase quantity">+</button>
                  </div>
                  <button class="remove-item-btn" aria-label="Remove ${item.name || 'Item'}">Remove</button>
                </div>
              </div>
            `;
            cartItemsContainer.appendChild(cartItemElement);
          });
        }
        updateCartSummary();
      };

      const updateCartSummary = () => {
        const totalItems = cartItems.reduce((sum, item) => sum + (item.quantity || 0), 0);
        const subtotal = cartItems.reduce((sum, item) => sum + ((item.price || 0) * (item.quantity || 0)), 0);

        cartCountElements.forEach(el => {
          el.textContent = totalItems;
          el.style.display = totalItems > 0 ? 'flex' : 'none';
        });
        cartItemCountDisplay.textContent = totalItems;
        subtotalPriceElement.textContent = `$${subtotal.toFixed(2)}`;

        const amountAway = FREE_SHIPPING_THRESHOLD - subtotal;
        if (amountAway > 0) {
          shippingAmountAwayEl.parentElement.style.display = 'block';
          shippingAmountAwayEl.textContent = `$${amountAway.toFixed(2)}`;
          shippingProgressBar.style.width = `${(subtotal / FREE_SHIPPING_THRESHOLD) * 100}%`;
        } else {
          shippingAmountAwayEl.parentElement.innerHTML = '<p style="font-weight: 500; color: #000;">You have free shipping!</p>';
        }
      };

      const addItemToCart = (product) => {
        const price = parseFloat(product.price) || 0;
        if (isNaN(price)) {
          console.warn('Invalid price detected, defaulting to 0.00 for', product.name);
          product.price = 0.00;
        }
        const formData = {
          id: product.variantId, // Use variantId like Supplements Slider
          quantity: 1,
          properties: {
            _subscription: product.subscription || 'false',
            _image: product.image,
            _title: product.name,
            _price: price.toFixed(2),
            _url: product.url,
            _variant_id: product.variantId
          }
        };

        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify(formData)
        })
        .then(response => {
          if (!response.ok) throw new Error('Failed to add item to cart');
          return response.json();
        })
        .then(() => {
          return fetch('/cart.js');
        })
        .then(response => response.json())
        .then(cart => {
          cartItems = cart.items.map(item => ({
            id: item.id,
            name: item.title,
            price: item.price / 100,
            image: item.image || 'https://placehold.co/200x200',
            quantity: item.quantity,
            variantId: item.variant_id,
            subscription: item.properties._subscription || 'false'
          }));
          renderCart();
          openCart();
          showAddToCartFeedback(product.name);
        })
        .catch(error => {
          console.error('Error adding to cart:', error);
          const existingItem = cartItems.find(item => item.id === product.id);
          if (existingItem) {
            existingItem.quantity++;
          } else {
            cartItems.push({ ...product, quantity: 1 });
          }
          renderCart();
          openCart();
          showAddToCartFeedback(product.name);
        });
      };

      const updateQuantity = (productId, action) => {
        const itemIndex = cartItems.findIndex(item => item.id === productId);
        if (itemIndex === -1) return;

        if (action === 'increase') {
          cartItems[itemIndex].quantity++;
        } else if (action === 'decrease') {
          cartItems[itemIndex].quantity--;
          if (cartItems[itemIndex].quantity <= 0) {
            cartItems.splice(itemIndex, 1);
          }
        }
        renderCart();
      };

      const removeItem = (productId) => {
        cartItems = cartItems.filter(item => item.id !== productId);
        renderCart();
      };

      // --- EVENT LISTENERS ---

      cartIcons.forEach(icon => {
        icon.addEventListener('click', (e) => {
          e.preventDefault();
          openCart();
        });
      });

      closeCartButton.addEventListener('click', closeCart);
      cartOverlay.addEventListener('click', closeCart);

      addToCartButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const card = e.target.closest('.bundle-card');
          if (!card) return;

          const basePrice = parseFloat(card.dataset.productPrice);
          const subscription = button.dataset.subscription === 'true';
          const product = {
            id: card.dataset.productId,
            name: card.dataset.productTitle,
            price: subscription ? (basePrice * 0.9) : basePrice,
            image: card.dataset.productImage,
            url: card.dataset.productUrl,
            variantId: card.dataset.variantId,
            subscription: button.dataset.subscription
          };
          addItemToCart(product);
        });
      });

      // Handle subscription radio buttons
      document.querySelectorAll('.radio-input').forEach(radio => {
        radio.addEventListener('change', function() {
          const card = this.closest('.bundle-card');
          const button = card.querySelector('.add-to-cart-btn');
          const basePrice = parseFloat(card.dataset.productPrice);
          if (this.value === 'subscribe') {
            const discountedPrice = (basePrice * 0.9).toFixed(2);
            button.textContent = `Add • $${discountedPrice}`;
            card.dataset.price = discountedPrice;
            button.dataset.subscription = 'true';
          } else {
            button.textContent = `Add • $${basePrice.toFixed(2)}`;
            card.dataset.price = basePrice;
            button.dataset.subscription = 'false';
          }
        });
      });

      cartItemsContainer.addEventListener('click', (e) => {
        const target = e.target;
        const cartItem = target.closest('.cart-item');
        if (!cartItem) return;

        const productId = cartItem.dataset.id;

        if (target.matches('.quantity-btn')) {
          updateQuantity(productId, target.dataset.action);
        } else if (target.matches('.remove-item-btn')) {
          removeItem(productId);
        }
      });

      // Slider functionality
      const prevBtn = document.querySelector('.nav-arrow.prev');
      const nextBtn = document.querySelector('.nav-arrow.next');
      const bundlesGrid = document.querySelector('.bundles-grid');
      
      if (prevBtn && nextBtn && bundlesGrid) {
        prevBtn.addEventListener('click', function() {
          bundlesGrid.scrollBy({ left: -320, behavior: 'smooth' });
        });
        
        nextBtn.addEventListener('click', function() {
          bundlesGrid.scrollBy({ left: 320, behavior: 'smooth' });
        });
      }

      // Show add to cart feedback
      function showAddToCartFeedback(productTitle) {
        const notification = document.createElement('div');
        notification.className = 'add-to-cart-notification';
        notification.innerHTML = `
          <div class="notification-content">
            <span>✓ ${productTitle} added to cart</span>
          </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => {
            notification.remove();
          }, 300);
        }, 3000);
      }

      // Style for notification (already matches Supplements Slider)
      const style = document.createElement('style');
      style.textContent = `
        .add-to-cart-notification {
          position: fixed;
          top: 100px;
          right: 20px;
          background: #111827;
          color: white;
          padding: 12px 20px;
          border-radius: 8px;
          z-index: 10000;
          font-size: 14px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.3);
          transform: translateX(100%);
          transition: transform 0.3s ease;
        }
      `;
      document.head.appendChild(style);
    });
  </script>
</section>

{% schema %}
{
  "name": "Bundles Section",
  "settings": [
    {
      "type": "text",
      "id": "icon_label",
      "label": "Icon Label",
      "default": "Goals Specific"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Bundles"
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View All Text",
      "default": "View All Bundles"
    },
    {
      "type": "url",
      "id": "view_all_link",
      "label": "View All Link"
    }
  ],
  "blocks": [
    {
      "name": "Category Tab",
      "type": "category_tab",
      "settings": [
        {
          "type": "text",
          "id": "tab_name",
          "label": "Tab Name",
          "default": "Sleep"
        },
        {
          "type": "url",
          "id": "tab_link",
          "label": "Tab Link"
        }
      ]
    },
    {
      "name": "Bundle",
      "type": "bundle",
      "settings": [
        {
          "type": "select",
          "id": "badge_type",
          "label": "Badge Type",
          "options": [
            { "value": "bestseller", "label": "Bestseller" },
            { "value": "new", "label": "New" },
            { "value": "sale", "label": "Sale" },
            { "value": "none", "label": "None" }
          ],
          "default": "none"
        },
        {
          "type": "text",
          "id": "badge_text",
          "label": "Badge Text"
        },
        {
          "type": "image_picker",
          "id": "bundle_image",
          "label": "Bundle Image"
        },
        {
          "type": "text",
          "id": "bundle_title",
          "label": "Bundle Title",
          "default": "Bundle Title"
        },
        {
          "type": "text",
          "id": "bundle_subtitle",
          "label": "Bundle Subtitle",
          "default": "Category, Subcategory"
        },
        {
          "type": "textarea",
          "id": "bundle_tags",
          "label": "Bundle Tags (one per line)",
          "default": "GMO Free\nGluten Free\nVegan\nDairy Free"
        },
        {
          "type": "product",
          "id": "bundle_product",
          "label": "Select Product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Bundles Section",
      "category": "Custom Content",
      "blocks": [
        {
          "type": "category_tab",
          "settings": {
            "tab_name": "Sleep"
          }
        },
        {
          "type": "category_tab",
          "settings": {
            "tab_name": "Cognitive Function"
          }
        },
        {
          "type": "bundle"
        },
        {
          "type": "bundle"
        }
      ]
    }
  ]
}
{% endschema %}